/*
 * TodoList RESTful API
 * OpenAPI for Todolist RESTful API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: armandwi.pangestu7@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import ArrayTodolist from '../model/ArrayTodolist';
import CreateOrUpdateTodolist from '../model/CreateOrUpdateTodolist';
import InlineResponse200 from '../model/InlineResponse200';
import Todolist from '../model/Todolist';

/**
* Todolist service.
* @module api/TodolistApi
* @version 1.0.0
*/
export default class TodolistApi {

    /**
    * Constructs a new TodolistApi. 
    * @alias module:api/TodolistApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the todolistGet operation.
     * @callback moduleapi/TodolistApi~todolistGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArrayTodolist{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All TodoList
     * Get all active todolist by default
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeDone Include done todolist in the result (default to <.>)
     * @param {String} opts.name Filter todolist by name
     * @param {module:api/TodolistApi~todolistGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    todolistGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'include_done': opts['includeDone'],'name': opts['name']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['TodolistAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArrayTodolist;

      return this.apiClient.callApi(
        '/todolist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the todolistPost operation.
     * @callback moduleapi/TodolistApi~todolistPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Todolist{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new Todolist
     * Create new Todolist to database
     * @param {module:model/CreateOrUpdateTodolist} body 
     * @param {module:api/TodolistApi~todolistPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    todolistPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling todolistPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['TodolistAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Todolist;

      return this.apiClient.callApi(
        '/todolist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the todolistTodolistIdDelete operation.
     * @callback moduleapi/TodolistApi~todolistTodolistIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete existing todolist
     * Delete existing todolist in database
     * @param {String} todolistId Todolist id for updated
     * @param {module:api/TodolistApi~todolistTodolistIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    todolistTodolistIdDelete(todolistId, callback) {
      
      let postBody = null;
      // verify the required parameter 'todolistId' is set
      if (todolistId === undefined || todolistId === null) {
        throw new Error("Missing the required parameter 'todolistId' when calling todolistTodolistIdDelete");
      }

      let pathParams = {
        'todolistId': todolistId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['TodolistAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/todolist/{todolistId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the todolistTodolistIdPut operation.
     * @callback moduleapi/TodolistApi~todolistTodolistIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Todolist{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update exisiting todolist
     * Update existing todolist in database
     * @param {module:model/CreateOrUpdateTodolist} body 
     * @param {String} todolistId Todolist id for updated
     * @param {module:api/TodolistApi~todolistTodolistIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    todolistTodolistIdPut(body, todolistId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling todolistTodolistIdPut");
      }
      // verify the required parameter 'todolistId' is set
      if (todolistId === undefined || todolistId === null) {
        throw new Error("Missing the required parameter 'todolistId' when calling todolistTodolistIdPut");
      }

      let pathParams = {
        'todolistId': todolistId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['TodolistAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Todolist;

      return this.apiClient.callApi(
        '/todolist/{todolistId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}